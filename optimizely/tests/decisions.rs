// Imports from Optimizely crate
use optimizely::{
    datafile::{AudienceCondition, BooleanCondition},
    user_attributes,
};

// Relative imports of sub modules
use common::setup;
mod common;

macro_rules! assert_decision {
    ($ctx: ident, $flag_key: ident, $user_id: expr, $enabled: expr, $variation_key: expr) => {{
        // Create new user context
        let user_context = $ctx.client.create_user_context($user_id);

        // Make decision for user
        let decision = user_context.decide($flag_key);

        // Assert the decision is consitent with given values
        assert_eq!(decision.enabled(), $enabled);
        assert_eq!(decision.variation_key(), $variation_key);
    }};
}

#[test]
fn qa_rollout_flag() {
    let ctx = setup();
    let flag_key = "qa_rollout";

    // Test against decision generated by the Python SDK
    assert_decision!(ctx, flag_key, "user0", false, "off");
    assert_decision!(ctx, flag_key, "user1", false, "off");
    assert_decision!(ctx, flag_key, "user2", false, "off");
    assert_decision!(ctx, flag_key, "user3", true, "on");
    assert_decision!(ctx, flag_key, "user4", true, "on");
    assert_decision!(ctx, flag_key, "user5", false, "off");
    assert_decision!(ctx, flag_key, "user6", true, "on");
    assert_decision!(ctx, flag_key, "user7", true, "on");
    assert_decision!(ctx, flag_key, "user8", false, "off");
    assert_decision!(ctx, flag_key, "user9", true, "on");
    assert_decision!(ctx, flag_key, "user10", true, "on");
    assert_decision!(ctx, flag_key, "user11", true, "on");
    assert_decision!(ctx, flag_key, "user12", false, "off");
    assert_decision!(ctx, flag_key, "user13", true, "on");
    assert_decision!(ctx, flag_key, "user14", false, "off");
    assert_decision!(ctx, flag_key, "user15", true, "on");

    // Since this key is a rollout, no events should be dispatched
    assert_eq!(ctx.event_list.borrow().len(), 0);
}

#[test]
fn buy_button_flag() {
    let ctx = setup();
    let flag_key = "buy_button";

    // Test against decision generated by the Python SDK
    assert_decision!(ctx, flag_key, "user0", true, "primary");
    assert_decision!(ctx, flag_key, "user1", true, "danger");
    assert_decision!(ctx, flag_key, "user2", true, "primary");
    assert_decision!(ctx, flag_key, "user3", true, "primary");
    assert_decision!(ctx, flag_key, "user4", true, "danger");
    assert_decision!(ctx, flag_key, "user5", true, "success");
    assert_decision!(ctx, flag_key, "user6", true, "success");
    assert_decision!(ctx, flag_key, "user7", true, "danger");
    assert_decision!(ctx, flag_key, "user8", true, "danger");
    assert_decision!(ctx, flag_key, "user9", true, "success");
    assert_decision!(ctx, flag_key, "user10", true, "success");
    assert_decision!(ctx, flag_key, "user11", true, "danger");
    assert_decision!(ctx, flag_key, "user12", true, "danger");
    assert_decision!(ctx, flag_key, "user13", true, "danger");
    assert_decision!(ctx, flag_key, "user14", true, "success");
    assert_decision!(ctx, flag_key, "user15", true, "danger");
    assert_decision!(ctx, flag_key, "user16", true, "primary");
    assert_decision!(ctx, flag_key, "user17", true, "warning");
    assert_decision!(ctx, flag_key, "user18", true, "danger");
    assert_decision!(ctx, flag_key, "user19", true, "success");
    assert_decision!(ctx, flag_key, "user20", true, "warning");
    assert_decision!(ctx, flag_key, "user21", true, "danger");
    assert_decision!(ctx, flag_key, "user22", true, "danger");
    assert_decision!(ctx, flag_key, "user23", true, "primary");
    assert_decision!(ctx, flag_key, "user24", true, "success");
    assert_decision!(ctx, flag_key, "user25", true, "success");
    assert_decision!(ctx, flag_key, "user26", true, "primary");
    assert_decision!(ctx, flag_key, "user27", true, "warning");
    assert_decision!(ctx, flag_key, "user28", true, "primary");
    assert_decision!(ctx, flag_key, "user29", true, "danger");
    assert_decision!(ctx, flag_key, "user30", true, "success");
    assert_decision!(ctx, flag_key, "user31", true, "primary");

    // Each of those 32 users should dispatch an event
    assert_eq!(ctx.event_list.borrow().len(), 32);
}

#[test]
fn invalid_flag() {
    let ctx = setup();
    let flag_key = "this_flag_does_not_exist";

    // An invalid flag should always be disabled
    assert_decision!(ctx, flag_key, "user1", false, "off");
    assert_decision!(ctx, flag_key, "user2", false, "off");
    assert_decision!(ctx, flag_key, "user3", false, "off");
    assert_decision!(ctx, flag_key, "user4", false, "off");

    // Since this key does not exist, no events should be dispatched
    assert_eq!(ctx.event_list.borrow().len(), 0);
}

#[test]
fn audience_evaluation() {
    let ctx = setup();

    // Create user context with given attributes
    let mweb_user_context = ctx.client.create_user_context_with_attributes(
        "user123",
        user_attributes! {
            "isMobile" => true,
            "platform" => "web",
        },
    );
    let dweb_user_context = ctx.client.create_user_context_with_attributes(
        "user123",
        user_attributes! {
            "isMobile" => false,
            "platform" => "web",
        },
    );
    let dios_user_context = ctx.client.create_user_context_with_attributes(
        "user123",
        user_attributes! {
            "isMobile" => false,
            "platform" => "ios",
        },
    );
    let missing_attrs_user_context = ctx
        .client
        .create_user_context_with_attributes("user123", user_attributes! {});
    let wrong_type_user_context = ctx.client.create_user_context_with_attributes(
        "user123",
        user_attributes! {
            "isMobile" => "false",
            "platform" => "web",
        },
    );

    let web_desktop_only_experiment = ctx.client.datafile().experiment("9300000125242").unwrap();

    assert!(!mweb_user_context.is_in_audience_of(web_desktop_only_experiment));
    assert!(mweb_user_context
        .decide_variation_for_experiment(web_desktop_only_experiment, false)
        .is_none());

    assert!(dweb_user_context.is_in_audience_of(web_desktop_only_experiment));
    assert_eq!(
        dweb_user_context
            .decide_variation_for_experiment(web_desktop_only_experiment, false)
            .unwrap()
            .key(),
        "treatment"
    );

    assert!(!dios_user_context.is_in_audience_of(web_desktop_only_experiment));
    assert!(dios_user_context
        .decide_variation_for_experiment(web_desktop_only_experiment, false)
        .is_none());

    assert!(!missing_attrs_user_context.is_in_audience_of(web_desktop_only_experiment));
    assert!(missing_attrs_user_context
        .decide_variation_for_experiment(web_desktop_only_experiment, false)
        .is_none());

    assert!(!wrong_type_user_context.is_in_audience_of(web_desktop_only_experiment));
    assert!(wrong_type_user_context
        .decide_variation_for_experiment(web_desktop_only_experiment, false)
        .is_none());
}

#[test]
fn audience_evaluation__empty_or_is_false() {
    let attrs = user_attributes!();
    let empty_or: BooleanCondition<AudienceCondition> = serde_json::from_str("[\"or\"]").unwrap();
    assert!(!empty_or.evaluate(&|condition| condition.evaluate(&attrs)));
}

#[test]
fn audience_evaluation__empty_and_is_true() {
    let attrs = user_attributes!();
    let empty_and: BooleanCondition<AudienceCondition> = serde_json::from_str("[\"and\"]").unwrap();
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&attrs)));
}

#[test]
fn audience_evaluation__and_requires_all() {
    let empty_and: BooleanCondition<AudienceCondition> = serde_json::from_str(
        "[
        \"and\",
        {\"type\":\"custom_attribute\",\"match\":\"gt\",\"name\":\"age\",\"value\":3},
        {\"type\":\"custom_attribute\",\"match\":\"exists\",\"name\":\"isMobile\",\"value\":null},
        {\"type\":\"custom_attribute\",\"match\":\"substring\",\"name\":\"platform\",\"value\":\"web\"}
    ]",
    )
    .unwrap();
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes!())));
    assert!(!empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>"4","isMobile"=>false,"platform"=>"web"}))); // age is not a number
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>false}))); // platform is missing
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"platform"=>"web"}))); // isMobile is missing
    assert!(!empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>-7,"isMobile"=>true,"platform"=>"web"}))); // age is too low
    assert!(!empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>3,"isMobile"=>true,"platform"=>"web"}))); // age is too low
    assert!(empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>3.1,"isMobile"=>false,"platform"=>"web"})));
    assert!(empty_and.evaluate(
        &|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>true,"platform"=>"some website"})
    ));
    assert!(empty_and.evaluate(
        &|condition| condition.evaluate(&user_attributes! {"age"=>10,"isMobile"=>true,"platform"=>"some website"})
    ));
}

#[test]
fn audience_evaluation__or_requires_any() {
    let empty_and: BooleanCondition<AudienceCondition> = serde_json::from_str(
        "[
        \"or\",
        {\"type\":\"custom_attribute\",\"match\":\"gt\",\"name\":\"age\",\"value\":3},
        {\"type\":\"custom_attribute\",\"match\":\"exists\",\"name\":\"isMobile\",\"value\":null},
        {\"type\":\"custom_attribute\",\"match\":\"substring\",\"name\":\"platform\",\"value\":\"web\"}
    ]",
    )
    .unwrap();
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes!())));
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>"4"})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"isMobile"=>"whoops"})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"platform"=>"web"})));
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"platform"=>"weeeb"})));
    assert!(empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>"4","isMobile"=>false,"platform"=>"web"})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>false})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"platform"=>"web"})));
    assert!(empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>-7,"isMobile"=>true,"platform"=>"web"})));
    assert!(empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>3,"isMobile"=>true,"platform"=>"web"})));
    assert!(empty_and
        .evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>3.1,"isMobile"=>false,"platform"=>"web"})));
    assert!(empty_and.evaluate(
        &|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>true,"platform"=>"some website"})
    ));
    assert!(empty_and.evaluate(
        &|condition| condition.evaluate(&user_attributes! {"age"=>10,"isMobile"=>true,"platform"=>"some website"})
    ));
}

#[test]
fn audience_evaluation__combinations() {
    let empty_and: BooleanCondition<AudienceCondition> = serde_json::from_str(
        "[
        \"or\",
        [
            \"and\",
            {\"type\":\"custom_attribute\",\"match\":\"gt\",\"name\":\"age\",\"value\":3},
            {\"type\":\"custom_attribute\",\"match\":\"exact\",\"name\":\"isMobile\",\"value\":true}
        ],
        [
            \"and\",
            [
                \"not\",
                {\"type\":\"custom_attribute\",\"match\":\"gt\",\"name\":\"age\",\"value\":3}
            ],
            {\"type\":\"custom_attribute\",\"match\":\"exact\",\"name\":\"isMobile\",\"value\":false}
        ]
    ]",
    )
    .unwrap();
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes!())));
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>"4", "isMobile"=>true})));
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>true})));
    assert!(!empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>4,"isMobile"=>"whoops"})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>3,"isMobile"=>false})));
    assert!(empty_and.evaluate(&|condition| condition.evaluate(&user_attributes! {"age"=>2,"isMobile"=>false})));
}
